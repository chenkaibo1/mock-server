# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1?:function_name}(${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
regex /((=)\s*|(:)\s*|(\()|\b)/f/(\))?/
snippet f
	function${M1?: ${1:functionName}}($2) {
		${0:$TM_SELECTED_TEXT}
	}${M2?;}${M3?,}${M4?)}
# Immediate function
trigger \(?f\(
endTrigger \)?
snippet f(
	(function(${1}) {
		${0:${TM_SELECTED_TEXT:/* code */}}
	}(${1}));
# if
snippet if
	if (${1:true}) {
		${0}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
# tertiary conditional
snippet ter
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}

# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${0:/* code */}
	}
# try
snippet try
	try {
		${0:/* code */}
	} catch (e) {}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
regex /([,{[])|^\s*/:f/
	${1:method_name}: function(${2:attribute}) {
		${0}
	}${3:,}
# setTimeout function
snippet setTimeout
regex /\b/st|timeout|setTimeo?u?t?/
	setTimeout(function() {${3:$TM_SELECTED_TEXT}}, ${1:10});
# Get Elements
snippet gett
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet get
	getElementBy${1:Id}('${2}')${3}
# console.log (Firebug)
snippet cl
	console.log(${1});
# return
snippet ret
	return ${1:result}
# for (property in object ) { ... }
snippet fori
	for (var ${1:prop} in ${2:Things}) {
		${0:$2[$1]}
	}
# hasOwnProperty
snippet has
	hasOwnProperty(${1})
# docstring
snippet /**
	/**
	 * ${1:description}
	 *
	 */
snippet @par
regex /^\s*\*\s*/@(para?m?)?/
	@param {${1:type}} ${2:name} ${3:description}
snippet @ret
	@return {${1:type}} ${2:description}
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function(${2:argument}) {
		${3:// initial code ...}

		$1 = function($2) {
			${4:// main code}
		};
	}
# singleton
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${3:// code ...}

		return instance;
	}
# class
snippet class
regex /^\s*/clas{0,2}/
	var ${1:class} = function(${20}) {
		$40$0
	};

	(function() {
		${60:this.prop = ''}
	}).call(${1:class}.prototype);

	exports.${1:class} = ${1:class};
#
snippet for-
	for (var ${1:i} = ${2:Things}.length; ${1:i}--; ) {
		${0:${2:Things}[${1:i}];}
	}
# for (...) {...}
snippet for
	for (var ${1:i} = 0; $1 < ${2:Things}.length; $1++) {
		${3:$2[$1]}$0
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${1:i} = ${2:Things}.length - 1; $1 >= 0; $1--) {
		${3:$2[$1]}$0
	}


#modules
snippet def
	define(function(require, exports, module) {
	'use strict';
	var ${1/.*\///} = require('${1}');

	$TM_SELECTED_TEXT
	});
snippet req
guard ^\s*
	var ${1/.*\///} = require('${1}');
	$0
snippet requ
guard ^\s*
	var ${1/.*\/(.)/\u$1/} = require('${1}').${1/.*\/(.)/\u$1/};
	$0
# Base
snippet em.base.boolean
	@boolean
snippet em.base.natural
	@natural(${1:60}, ${2:100})
snippet em.base.integer
	@integer(${1:60}, ${2:100})
snippet em.base.float
	@float(${1:60}, ${2:100})
snippet em.base.character
	@character(${1:'abcde'})
snippet em.base.string
	@string(${1:7}, ${2:20})
snippet em.base.range
	@range(${1:3}, ${2:7})
# Date
snippet em.date.date
	@date
snippet em.date.time
	@time
snippet em.date.datetime
	@datetime
snippet em.date.now
	@now
# Image
snippet em.image.image
	@image(${1:'200x100'}, ${2:'#50B347'}, ${3:'#FFF'}, ${4:'EasyMock'})
snippet em.image.dataImage
	@dataImage(${1:'200x100'}, ${2:'EasyMock'})
# Color
snippet em.color.color
	@color
snippet em.color.hex
	@hex
snippet em.color.rgb
	@rgb
snippet em.color.rgba
	@rgba
snippet em.color.hsl
	@hsl
# Text
snippet em.text.paragraph
	@paragraph(${1:1}, ${2:3})
snippet em.text.sentence
	@sentence(${1:3}, ${2:5})
snippet em.text.word
	@word(${1:3}, ${2:5})
snippet em.text.title
	@title(${1:3}, ${2:5})
snippet em.text.cparagraph
	@cparagraph(${1:1}, ${2:3})
snippet em.text.csentence
	@csentence(${1:3}, ${2:5})
snippet em.text.cword
	@cword(${1:'零一二三四五六七八九十'}, ${2:5}, ${3:7})
snippet em.text.ctitle
	@ctitle(${1:3}, ${2:5})
# Name
snippet em.name.first
	@first
snippet em.name.last
	@last
snippet em.name.name
	@name
snippet em.name.cfirst
	@cfirst
snippet em.name.clast
	@clast
snippet em.name.cname
	@cname
# Web
snippet em.web.url
	@url
snippet em.web.domain
	@domain
snippet em.web.protocol
	@protocol
snippet em.web.tld
	@tld
snippet em.web.email
	@email
snippet em.web.ip
	@ip
# Address
snippet em.address.region
	@region
snippet em.address.province
	@province
snippet em.address.city
	@city(${1:true})
snippet em.address.county
	@county(${1:true})
snippet em.address.zip
	@zip
# Helper
snippet em.helper.capitalize
	@capitalize(${1:'hello'})
snippet em.helper.upper
	@upper(${1:'hello'})
snippet em.helper.lower
	@lower(${1:'HELLO'})
snippet em.helper.pick
	@pick(['a', 'e', 'i', 'o', 'u'])
snippet em.helper.shuffle
	@shuffle(['a', 'e', 'i', 'o', 'u'])
# Miscellaneous
snippet em.miscellaneous.guid
	@guid
snippet em.miscellaneous.id
	@id
snippet em.miscellaneous.increment
	@increment(${1:1000})